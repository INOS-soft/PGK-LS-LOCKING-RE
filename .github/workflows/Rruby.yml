# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: Ruby

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ['2.6', '2.7', '3.0']

    steps:
    - uses: actions/checkout@v2
    - name: Set up Ruby
    # To automatically get bug fixes and new Ruby versions for ruby/setup-ruby,
    # change this to (see https://github.com/ruby/setup-ruby#versioning):
    # uses: ruby/setup-ruby@v1
      uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
    - name: Run tests
      run: bundle exec rake
[![Labeler](https://github.com/INOS-soft/IoC-Countainer-for-Typescript-3X/actions/workflows/label.yml/badge.svg)](https://github.com/INOS-soft/IoC-Countainer-for-Typescript-3X/actions/workflows/label.yml)
- name: Setup Node.js environment
  uses: actions/setup-node@v2.1.5
  with:
    # Set always-auth in npmrc
    always-auth: # optional, default is false
    # Version Spec of the version to use.  Examples: 12.x, 10.15.1, >=10.15.0
    node-version: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN
    registry-url: # optional
    # Optional scope for authenticating against scoped registries
    scope: # optional
    # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
    token: # optional, default is ${{ github.token }}
    # Deprecated. Use node-version instead. Will not be supported after October 1, 2019
    version: # optional
    - name: Set up gcloud Cloud SDK environment
  # You may pin to the exact commit or the version.
  # uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
  uses: google-github-actions/setup-gcloud@v0.2.0
  with:
    # Version of the gcloud SDK to install. If unspecified or set to "latest",
the latest available gcloud SDK version for the target platform will be
installed. Example: "290.0.1".
    version: # optional, default is latest
    # Service account email address to use for authentication. This is required
for legacy .p12 keys but can be omitted for .json keys. This is usually of
the format <name>@<project-id>.iam.gserviceaccount.com.
    service_account_email: # optional
    # Service account key to use for authentication. This should be the JSON
formatted private key which can be exported from the Cloud Console. The
value can be raw or base64-encoded.
    service_account_key: # optional
    # ID of the Google Cloud project. If provided, this will configure gcloud to
use this project ID by default for commands. Individual commands can still
override the project using the --project flag which takes precedence.
    project_id: # optional
    # Export the provided credentials as Google Default Application Credentials.
This will make the credentials available to later steps via the
GOOGLE_APPLICATION_CREDENTIALS environment variable. Future steps that
consume Default Application Credentials will automatically detect and use
these credentials.
    export_default_credentials: # optional
    - name: Vault Secrets
  # You may pin to the exact commit or the version.
  # uses: hashicorp/vault-action@5e5c06a3c8e96b7c4757fe7a10e03469cdbd07bb
  uses: hashicorp/vault-action@v2.1.2
  with:
    # The URL for the vault endpoint
    url: 
    # A semicolon-separated list of secrets to retrieve. These will automatically be converted to environmental variable keys. See README for more details
    secrets: 
    # The Vault namespace from which to query secrets. Vault Enterprise only, unset by default
    namespace: # optional
    # The method to use to authenticate with Vault.
    method: # optional, default is token
    # The Vault Token to be used to authenticate with Vault
    token: # optional
    # The Role Id for App Role authentication
    roleId: # optional
    # The Secret Id for App Role authentication
    secretId: # optional
    # The Github Token to be used to authenticate with Vault
    githubToken: # optional
    # The JSON payload to be sent to Vault when using a custom authentication method.
    authPayload: # optional
    # A string of newline separated extra headers to include on every request.
    extraHeaders: # optional
    # Whether or not export secrets as environment variables.
    exportEnv: # optional, default is true
    # Whether or not export Vault token as environment variables.
    exportToken: # optional, default is false
    # Base64 encoded CA certificate to verify the Vault server certificate.
    caCertificate: # optional
    # Base64 encoded client certificate for mTLS communication with the Vault server.
    clientCertificate: # optional
    # Base64 encoded client key for mTLS communication with the Vault server.
    clientKey: # optional
    # When set to true, disables verification of the Vault server certificate.  Setting this to true in production is not recommended.
    tlsSkipVerify: # optional, default is false
